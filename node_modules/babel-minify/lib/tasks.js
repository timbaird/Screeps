'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilesAndMinify = getFilesAndMinify;
exports.putFiles = putFiles;
exports.runTasks = runTasks;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ = require('../');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getFilesAndMinify(argv, opts) {
  argv.results = argv._.map(fileOrDir => {
    if (_fs2.default.statSync(fileOrDir).isDirectory()) {
      opts.logger.error('Directories are not supported.');
      throw new Error('Input file is a Directory');
    }
    return fileOrDir;
  }).map(file => ({
    contents: String(_fs2.default.readFileSync(file)),
    filename: file
  })).map(_ref => {
    let contents = _ref.contents;
    let filename = _ref.filename;
    return {
      contents: (0, _2.default)(contents, argv),
      filename: filename
    };
  });
}

function putFiles(argv, opts) {
  argv.results.forEach(_ref2 => {
    let contents = _ref2.contents;
    let filename = _ref2.filename;

    if (argv._.length === 1) {
      if (argv.output) _fs2.default.writeFileSync(argv.output, contents);else opts.logger.log(contents);
    } else {
      if (argv.outputDir) {
        const basename = _path2.default.basename(filename);
        _fs2.default.writeFileSync(_path2.default.join(argv.outputDir, basename), contents);
      } else {
        opts.logger.error('Output Directory unspecified');
        throw new Error('Output Directory unspecified');
      }
    }
  });
}

function runTasks(argv, opts) {
  const tasks = [getFilesAndMinify, putFiles];
  tasks.forEach(task => task(argv, opts));
}