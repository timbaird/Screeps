'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref /*:PluginOptions*/) {
  let t = _ref.types;

  return {
    visitor: {
      FunctionExpression: function FunctionExpression(path /*:NodePath*/) {
        var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? /*:FunctionToArrowOptions*/{} : arguments[1];

        var _ref2$opts = _ref2.opts;
        _ref2$opts = _ref2$opts === undefined ? {} : _ref2$opts;
        var _ref2$opts$keep_fname = _ref2$opts.keep_fnames;
        let keep_fnames = _ref2$opts$keep_fname === undefined ? false : _ref2$opts$keep_fname;

        if (isReplacable(path, keep_fnames)) {
          path.replaceWith(t.arrowFunctionExpression(path.node.params, path.node.body));
        }
      },

      ArrowFunctionExpression: {
        exit: function exit(path /*:NodePath*/) {
          if (isArrowReplacable(path)) {
            var body = path.get('body');
            body.replaceWith(body.node.body[0].argument);
          }
        }
      }
    }
  };
};

// @flow
/*::import type {NodePath, Binding, Scope, Node, PluginOptions} from 'Babel';*/
function isReplacable(path, keep_fnames) {
  if (keep_fnames && path.get('id').node) return false;
  let replacable = true;
  path.traverse({
    ThisExpression: function ThisExpression() {
      replacable = false;
    },
    Identifier: function Identifier(idPath /*:NodePath*/) {
      if (idPath.node.name === 'arguments') replacable = false;
    }
  });
  return replacable;
}

function isArrowReplacable(path) {
  let body = path.get('body');
  if (body.isBlockStatement() && body.node.body.length === 1 && body.node.body[0].type === "ReturnStatement") return true;
}

module.exports = exports['default'];